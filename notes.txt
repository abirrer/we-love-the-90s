//Notes from 13 March lecture

There is a main app component.
We're going to have a logo component, a welcome component, a main component.
In the welcome component, we will have two a login and a register component.

To render everything, we would do:
ReactDOM.render(
    <App/>, //first argument is a single component.  Cannot accept more than one.
    document.querySelector('main') //second argument is vanilla javascript that we put the component into.
);

//Tips for Debugging
    -check your import/export (default) stuff
    -check that you "return"ed your JSX

//Setting up Git
git clone [link to github]
git checkout -b annabirrer
git add .
git commit -m "First commit"
git push origin annabirrer:annabirrer

//Setting up servers
node bundle-server.js (in a separate tab)
node index.js

//Props
values that are passed down to components

//State
the internal state of a class component.

//Lifecycle

componentDidMount = best place to make API calls

//Making Forms
    1. put name attribute on inputs
    2. create onChange event listener
    3. update the state in the onChange

//Part 1 Notes

----Key things to do----
-make Welcome component
-wire up onChange and onSubmit events on our form
-make Registration component
-make Logo component

-create DB
-use spicedPG
-make a POST route for our registration, utilizing axios. this happens inside the registration Form. Also need INSERT query into db
-implement logic in start.js that checks URL and renders corresponding page. (simple else if statement)
-routes in our server for /welcome and /
-for Registration, we need to use bcrypt to hashPassword and store the hash in the db (server stuff is similar to the petition project)
-make separate queries.js file
-styling

In handlesubmit, if there is an error, than render an error.
it will show up in a .catch

How the app will be structured:

Not logged in -> only allowed to see login and register pages
if logged in -> can see everything else

in start.js:
//use the location.pathname to look at urlname
//check for URL, if it is /welcome, load the welcome component
//into ReactDOM.render....otherwise, render Logo
//we will use req.session to set the logged in user, etc.

//Not logged in pages:
url is /welcome
so we need an app.get(/welcome) and send a user to this route if a user is not logged in.
render the welcome component, inside the welcome component is a registration component.
the welcome component will render the registration component.

//Logged in pages:
If they are logged in, send to the "/" route
should show us the logo component

here's now to do the logo:
function Logo() {
    return (
        <img />
    )
}

then embed it like <Logo />


two routes:

/welcome --> NOT logged in
/ -> logged in
Both of these routes serve the same res.sendFile(index.html), the only difference is the URL

so there is an if statement, that if they try to go to welcome and they are logge din,
then redirect them to /

inside of start.js, we need to check for URL and serve the different pages.

//Notes on 14 March

in welcome page we will use the hashrouter.

for the main/app page after login, then we use the browser router.

//NOTES FOR PART 3
Create a class component called App,
have a component did mount and make an axios get request to get user information.
Get id, first, last, profile pic, email

need a route for our server, similar to vue project.
The app instance should pass the information to setState.
Inside app we will have logo and profile pic and profile pic upload components.
pass the data with props to our profile pic component.

multer, aws s3, uid all set up.

set default profile picture in the this.state of the constructor

profile pic upload should display as a modal.

we will use formData to grab image from react app and save in a formdata api which can be sent to our express server.
very similar to what was done in view.

how to add things to form data: formdata.append

TO DOs:
1. Get the imge from the file input
2. Append all the data to the FormData constructor
3. axios post request, sending the formData.
4. Make a route to handle the upload.
5. Configure multer on our server.
6. Pass multer as middleware to the upload route.
7. Do the S3 dance (setting it up on AWS and in server, then successfully upload an image to our s3 bucket) which you will need to create.
8. Upon successful upload, save filename in DB along with any other information.
9. Then res.json the filename (maybe id, anything else. Optionally including the S3 base route URL).
10. setState with the new profilePicUrl.

when we upload picture, have a handleChange method

handleSubmit(e) {
    e.preventDefault()
    let formData = new FormData();
    form.Data.append('profilepic', this.state.profilepic);

//Add axios post request, but redux alternative is:
//    this.props.dispatch(uploadImage(formData))
}

handleChange(e) {
    this.setState({
        [e.target.name]: e.target.files[0]
    }, () => {
        console.log('new state', this.state);
    })
}


WE will need to pass prop of this.toggleUploadForm
